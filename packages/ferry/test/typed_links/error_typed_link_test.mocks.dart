// Mocks generated by Mockito 5.0.2 from annotations
// in ferry/test/typed_links/error_typed_link_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:ferry_exec/src/operation_request.dart' as _i3;
import 'package:ferry_exec/src/operation_response.dart' as _i5;
import 'package:ferry_exec/src/typed_link.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeTypedLink extends _i1.Fake implements _i2.TypedLink {}

/// A class which mocks [TypedLink].
///
/// See the documentation for Mockito's code generation for more information.
class MockTypedLink extends _i1.Mock implements _i2.TypedLink {
  MockTypedLink() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TypedLink concat(_i2.TypedLink? next) =>
      (super.noSuchMethod(Invocation.method(#concat, [next]),
          returnValue: _FakeTypedLink()) as _i2.TypedLink);
  @override
  _i2.TypedLink route(_i2.TypedLinkRouter<dynamic, dynamic>? route) =>
      (super.noSuchMethod(Invocation.method(#route, [route]),
          returnValue: _FakeTypedLink()) as _i2.TypedLink);
  @override
  _i2.TypedLink split(
          bool Function<TData, TVars>(_i3.OperationRequest<TData, TVars>)? test,
          _i2.TypedLink? left,
          [_i2.TypedLink? right = const _i2.PassthroughTypedLink()]) =>
      (super.noSuchMethod(Invocation.method(#split, [test, left, right]),
          returnValue: _FakeTypedLink()) as _i2.TypedLink);
  @override
  _i4.Stream<_i5.OperationResponse<TData, TVars>> request<TData, TVars>(
          _i3.OperationRequest<TData, TVars>? request,
          [_i2.NextTypedLink<TData, TVars>? forward]) =>
      (super.noSuchMethod(Invocation.method(#request, [request, forward]),
              returnValue: Stream<_i5.OperationResponse<TData, TVars>>.empty())
          as _i4.Stream<_i5.OperationResponse<TData, TVars>>);
  @override
  _i4.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}
